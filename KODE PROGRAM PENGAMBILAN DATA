#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#include "DHT.h"
#define DHTPIN 15
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

int led = 2;
unsigned long previousMillis = 0;
const long interval = 1000; 
int counterupload = 0;
float suhu = 0, kelembaban = 0;

#include "time.h"
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 0;
const int   daylightOffset_sec = 25200;
int jam, menit, detik, tanggal, tahun;
String hari, bulan, waktu;

#include "ThingSpeak.h"
#include <WiFi.h>

WiFiClient client;
unsigned long myChannelNumber = 2596845;
const char * myWriteAPIKey = "AW19DS4K5Y7GDSZZ";
const char *ssid     = "SafitriAyu";
const char *password = "20507334031";

void printLocalTime(){
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }

char buff[10];
  strftime(buff, 3, "%H", &timeinfo);
  menit = atoi(buff);
  strftime(buff, 3, "%M", &timeinfo);
  menit = atoi(buff);
  strftime(buff, 3, "%S", &timeinfo);
  detik = atoi(buff);
  strftime(buff, 10, "%a", &timeinfo);
  hari = String(buff);
  strftime(buff, 10, "%b", &timeinfo);
  bulan = String(buff);
  strftime(buff, 3, "%d", &timeinfo);
  tanggal = atoi(buff);
  strftime(buff, 5, "%y", &timeinfo);
  tahun = atoi(buff);

  waktu = String(jam) + ":" + String(menit) + ":" + String(detik) + " " + String(tanggal) + " " + bulan + " " + String(tahun);
  Serial.println("Current time: " + waktu);
}

void run_program(){
  suhu = dht.readTemperature();
  kelembaban = dht.readHumidity();

  if (isnan(suhu) || isnan(kelembaban)) {
    Serial.println("Failed to read from DHT sensor!");
    suhu = 0;
    kelembaban = 0;
  } else {
    Serial.print("Temp: ");
    Serial.print(suhu);
    Serial.print("C, Humi: ");
    Serial.print(kelembaban);
    Serial.println("%");
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print(waktu);
  display.setCursor(0, 16);
  display.print("    Temp: ");
  display.print(suhu);
  display.print("C");
  display.setCursor(0, 28);
  display.print("    Humi: ");
  display.print(kelembaban);
  display.print("%");
  display.display();
}

void upload_kethingspeak(){
  if (counterupload == 0) {
    ThingSpeak.setField(1, suhu);
    ThingSpeak.setField(2, kelembaban);
    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
    if (x == 200) {
      Serial.println("Update thingspeak Ok");
    } else {
      Serial.println("Update thingspeak error code " + String(x));
    }
  }
  counterupload++;
  if (counterupload >= 60) counterupload = 0;
}

void connect_wifi(){
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
    digitalWrite(led, !digitalRead(led));
  }
  ThingSpeak.begin(client);
  Serial.println("Connected to WiFi");
}

void setup(){
  pinMode(led, OUTPUT);
  Serial.begin(9600);
  Serial.println("starting");

  dht.begin();
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("SSD1306 allocation failed");
    for (;;);
  }

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.clearDisplay();
  display.setCursor(30, 0);
  display.print("SARIMA");
  display.setCursor(0, 16);
  display.print("SSID:");
  display.print(ssid);
  display.setCursor(0, 28);
  display.print("PASS:");
  display.print(password);
  display.display();

  Serial.println("Connecting to WiFi...");
  connect_wifi();
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    printLocalTime();
    run_program();
    upload_kethingspeak();
    digitalWrite(led, !digitalRead(led)^1);
  }
}

